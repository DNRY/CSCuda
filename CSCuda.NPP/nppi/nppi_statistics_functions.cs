using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using Npp8u = System.Byte;
using Npp8s = System.SByte;
using Npp16u = System.UInt16;
using Npp16s = System.Int16;
using Npp32u = System.UInt32;
using Npp32s = System.Int32;
using Npp64u = System.UInt64;
using Npp64s = System.Int64;
using Npp32f = System.Single;
using Npp64f = System.Double;

namespace CSCuda.NPP
{
    public partial class Nppi
    {
        /// <summary>
        /// One-channel 8-bit unsigned image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="pSum">Pointer to the computed sum.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pSum);

        /// <summary>
        /// One-channel 8-bit unsigned image sum. The result is 64-bit long long integer.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="pSum">Pointer to the computed sum.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_8u64s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pSum);

        /// <summary>
        /// One-channel 16-bit unsigned image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="pSum">Pointer to the computed sum.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pSum);

        /// <summary>
        /// One-channel 16-bit signed image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="pSum">Pointer to the computed sum.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pSum);

        /// <summary>
        /// One-channel 32-bit floating point image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pSum">Pointer to the computed sum.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pSum);

        /// <summary>
        /// Three-channel 8-bit unsigned image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Three-channel 16-bit unsigned image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Three-channel 16-bit signed image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Three-channel 32-bit floating point image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 8-bit unsigned image sum ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel (alpha channel is not computed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 16-bit unsigned image sum ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel (alpha channel is not computed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 16-bit signed image sum ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel (alpha channel is not computed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 32-bit floating point image sum ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel (alpha channel is not computed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 8-bit unsigned image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 8-bit unsigned image sum. The result is 64-bit long long integer.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_8u64s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64s[] aSum);

        /// <summary>
        /// Four-channel 16-bit unsigned image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 16-bit signed image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aSum);

        /// <summary>
        /// Four-channel 32-bit floating point image sum.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aSum">Array that contains computed sum for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSum_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aSum);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_8u64s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_8u64s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSumGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed minimum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin);

        /// <summary>
        /// One-channel 16-bit unsigned image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed minimum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin);

        /// <summary>
        /// One-channel 16-bit signed image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed minimum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin);

        /// <summary>
        /// One-channel 32-bit floating point image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed minimum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin);

        /// <summary>
        /// Three-channel 8-bit unsigned image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMin);

        /// <summary>
        /// Three-channel 16-bit unsigned image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMin);

        /// <summary>
        /// Three-channel 16-bit signed image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMin);

        /// <summary>
        /// Three-channel 32-bit floating point image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMin);

        /// <summary>
        /// Four-channel 8-bit unsigned image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp8u[] aMin);

        /// <summary>
        /// Four-channel 16-bit unsigned image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16u[] aMin);

        /// <summary>
        /// Four-channel 16-bit signed image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16s[] aMin);

        /// <summary>
        /// Four-channel 32-bit floating point image min.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32f[] aMin);

        /// <summary>
        /// Four-channel 8-bit unsigned image min ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMin);

        /// <summary>
        /// Four-channel 16-bit unsigned image min ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMin);

        /// <summary>
        /// Four-channel 16-bit signed image min ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMin);

        /// <summary>
        /// Four-channel 32-bit floating point image min ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the computed minimum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMin_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMin);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed min result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image min value.</param>
        /// <param name="pIndexY">Ppointer to the Y coordinate of the image min value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// One-channel 16-bit unsigned image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed min result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image min value.</param>
        /// <param name="pIndexY">Pointer to the Y coordinate of the image min value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// One-channel 16-bit signed image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed min result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image min value.</param>
        /// <param name="pIndexY">Pointer to the Y coordinate of the image min value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// One-channel 32-bit floating point image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMin">Pointer to the computed min result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image min value.</param>
        /// <param name="pIndexY">Pointer to the Y coordinate of the image min value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMin,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// Three-channel 8-bit unsigned image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Three-channel 16-bit unsigned image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Three-channel 16-bit signed image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Three-channel 32-bit floating point image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 8-bit unsigned image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp8u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit unsigned image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit signed image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16s[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 32-bit floating point image MinIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32f[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 8-bit unsigned image MinIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit unsigned image MinIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit signed image MinIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 32-bit floating point image MinIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMin">Array that contains the min values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image min values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image min values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndx_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMinIndx_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinIndxGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed maximum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax);

        /// <summary>
        /// One-channel 16-bit unsigned image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed maximum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax);

        /// <summary>
        /// One-channel 16-bit signed image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed maximum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax);

        /// <summary>
        /// One-channel 32-bit floating point image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed maximum result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax);

        /// <summary>
        /// Three-channel 8-bit unsigned image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMax);

        /// <summary>
        /// Three-channel 16-bit unsigned image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMax);

        /// <summary>
        /// Three-channel 16-bit signed image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMax);

        /// <summary>
        /// Three-channel 32-bit floating point image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMax);

        /// <summary>
        /// Four-channel 8-bit unsigned image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp8u[] aMax);

        /// <summary>
        /// Four-channel 16-bit unsigned image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16u[] aMax);

        /// <summary>
        /// Four-channel 16-bit signed image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16s[] aMax);

        /// <summary>
        /// Four-channel 32-bit floating point image Max.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32f[] aMax);

        /// <summary>
        /// Four-channel 8-bit unsigned image Max ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMax);

        /// <summary>
        /// Four-channel 16-bit unsigned image Max ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMax);

        /// <summary>
        /// Four-channel 16-bit signed image Max ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMax);

        /// <summary>
        /// Four-channel 32-bit floating point image Max ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the computed maximum results for each channel (alpha channel is not processed).</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMax_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMax);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed max result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image max value.</param>
        /// <param name="pIndexY">Ppointer to the Y coordinate of the image max value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// One-channel 16-bit unsigned image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed max result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image max value.</param>
        /// <param name="pIndexY">Pointer to the Y coordinate of the image max value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// One-channel 16-bit signed image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed max result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image max value.</param>
        /// <param name="pIndexY">Pointer to the Y coordinate of the image max value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// One-channel 32-bit floating point image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMax">Pointer to the computed max result.</param>
        /// <param name="pIndexX">Pointer to the X coordinate of the image max value.</param>
        /// <param name="pIndexY">Pointer to the Y coordinate of the image max value.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMax,
            IntPtr pIndexX,
            IntPtr pIndexY);

        /// <summary>
        /// Three-channel 8-bit unsigned image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Three-channel 16-bit unsigned image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Three-channel 16-bit signed image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Three-channel 32-bit floating point image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 8-bit unsigned image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp8u[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit unsigned image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16u[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit signed image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16s[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 32-bit floating point image MaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32f[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] aIndexY);

        /// <summary>
        /// Four-channel 8-bit unsigned image MaxIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit unsigned image MaxIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 16-bit signed image MaxIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Four-channel 32-bit floating point image MaxIndx ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMax">Array that contains the max values.</param>
        /// <param name="aIndexX">Array that contains the X coordinates of the image max values.</param>
        /// <param name="aIndexY">Array that contains the Y coordinates of the image max values.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndx_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMax,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexX,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aIndexY);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the dvice scratch buffer size (in bytes) for nppiMaxIndx_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxIndxGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMin">Pointer to the computed minimal result.</param>
        /// <param name="pMax">Pointer to the computed maximal result.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMin,
            IntPtr pMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMin">Pointer to the computed minimal result.</param>
        /// <param name="pMax">Pointer to the computed maximal result.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMin,
            IntPtr pMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMin">Pointer to the computed minimal result.</param>
        /// <param name="pMax">Pointer to the computed maximal result.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMin,
            IntPtr pMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMin">Pointer to the computed minimal result.</param>
        /// <param name="pMax">Pointer to the computed maximal result.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMin,
            IntPtr pMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image MinMax ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image MinMax ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16u[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image MinMax ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp16s[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image MinMax ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp8u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp8u[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16u[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16u[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16s[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp16s[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image MinMax.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aMin">Array that contains the minima.</param>
        /// <param name="aMax">Array that contains the maxima.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMax_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32f[] aMin,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32f[] aMax,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 8-bit unsigned char image.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 8-bit signed char image.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 16-bit unsigned short image.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the minimal and the maximal pixel values with their X and Y coordinates of 1-channel 32-bit floating point image.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image MinMaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image MinMaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8s_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image MinMaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_16u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image MinMaxIndx.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_32f_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8u_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8s_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_16u_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_32f_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_8s_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_16u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image MinMaxIndx affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pMinValue">Pointer to the minimum value.</param>
        /// <param name="pMaxValue">Pointer to the maximum value.</param>
        /// <param name="pMinIndex">Pointer to the indicies (X and Y coordinates) of the minimum value.</param>
        /// <param name="pMaxIndex">Pointer to the indicies (X and Y coordinates) of the maximum value.</param>
        /// <param name="pDeviceBuffer">Buffer to a scratch memory. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified. If the mask is filled with zeros, then all the returned values are zeros, i.e., pMinIndex = {0, 0}, pMaxIndex = {0, 0}, pMinValue = 0, pMaxValue = 0. If any of pMinValue, pMaxValue, pMinIndex, or pMaxIndex is not needed, zero pointer must be passed correspondingly.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndx_32f_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pMinValue,
            IntPtr pMaxValue,
            IntPtr pMinIndex,
            IntPtr pMaxIndex,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8u_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8s_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_16u_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_32f_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinMaxIndxGetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// One-channel 16-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// One-channel 16-bit signed image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// One-channel 32-bit floating point image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Three-channel 8-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Three-channel 16-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Three-channel 16-bit signed image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Three-channel 32-bit floating point image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 8-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 16-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 16-bit signed image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 32-bit floating point image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 8-bit unsigned image Mean ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 16-bit unsigned image Mean ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 16-bit signed image Mean ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Four-channel 32-bit floating point image Mean ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="aMean">Array that contains the computed mean results.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aMean);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked one-channel 8-bit signed image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8s_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked one-channel 32-bit floating point image Mean.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_32f_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image Mean affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked three-channel 8-bit signed image Mean affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_8s_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image Mean affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_16u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked three-channel 32-bit floating point image Mean affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean result.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_32f_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image NormDiff_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image NormDiff_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8s_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image NormDiff_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image NormDiff_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_32f_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanGetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// One-channel 8-bit signed image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// One-channel 16-bit unsigned image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// One-channel 32-bit floating point image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked one-channel 8-bit signed image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8s_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_16u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked one-channel 32-bit floating point image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_32f_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Three-channel 8-bit unsigned image Mean_StdDev affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8u_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Three-channel 8-bit signed image Mean_StdDev affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8s_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Three-channel 16-bit unsigned image Mean_StdDev affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_16u_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Three-channel 32-bit floating point image Mean_StdDev affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_32f_C3CR(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked three-channel 8-bit signed image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_8s_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_16u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Masked three-channel 32-bit floating point image Mean_StdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer Use</param>
        /// <param name="pMean">Pointer to the computed mean.</param>
        /// <param name="pStdDev">Pointer to the computed standard deviation.</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMean_StdDev_32f_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pDeviceBuffer,
            IntPtr pMean,
            IntPtr pStdDev);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8u_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8s_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_16u_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_32f_C3CR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMeanStdDevGetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_32s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Norm_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Norm_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Norm_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Norm_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8s_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image Norm_Inf.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_32f_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image Norm_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image Norm_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_8s_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image Norm_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_16u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image Norm_Inf affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_Inf_32f_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_32s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormInfGetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Norm_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Norm_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Norm_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Norm_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8s_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image Norm_L1.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_32f_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image Norm_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image Norm_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_8s_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image Norm_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_16u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image Norm_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if the step of the source image cannot be divided by 4, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L1_32f_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL1GetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Norm_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Norm_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Norm_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Norm_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Three-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNorm">Array that contains the norm values of Four-channels.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8s_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16u_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if the step of the source image cannot be divided by 4.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_32f_C1MR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_8s_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_16u_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image Norm_L2.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNorm">Pointer to the norm value.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if the step of the source image cannot be divided by 4, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNorm_L2_32f_C3CMR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNorm,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormL2GetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormDiff_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormDiff_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormDiff_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16s_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormDiff_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned images NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed images NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_8s_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned images NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_16u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point images NormDiff_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_Inf_32f_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffInfGetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32fc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32fc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_64f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32fc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_8s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_16sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_32fc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumErrorGetBufferHostSize_64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32fc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32fc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_64f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32fc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_8s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_16sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_32fc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageErrorGetBufferHostSize_64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32fc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32fc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_64f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32fc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_8s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_16sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_32fc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeErrorGetBufferHostSize_64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32sc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32fc_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32u_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32s_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32sc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32fc_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_64f_C2R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32sc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32fc_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_8s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_16sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32sc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_32fc_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeErrorGetBufferHostSize_64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormDiff_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormDiff_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormDiff_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16s_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormDiff_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8s_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image NormDiff_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_32f_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image NormDiff_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image NormDiff_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_8s_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image NormDiff_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_16u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image NormDiff_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L1_32f_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8s_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16s_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_8s_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_16u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L1_32f_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL1GetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormDiff_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormDiff_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormDiff_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16s_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormDiff_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormDiff">Array that contains computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8s_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image NormDiff_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_32f_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image NormDiff_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image NormDiff_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_8s_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image NormDiff_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_16u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image NormDiff_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormDiff">Pointer to the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiff_L2_32f_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormDiff,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8s_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16s_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_8s_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_16u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormDiff_L2_32f_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormDiffL2GetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormRel_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormRel_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormRel_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16s_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormRel_Inf ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8s_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image NormRel_Inf.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_32f_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image NormRel_Inf affecting only signle channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image NormRel_Inf affecting only signle channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_8s_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image NormRel_Inf affecting only signle channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_16u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image NormRel_Inf affecting only signle channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the infinity norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the infinity norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_Inf_32f_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_32s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8s_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16s_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_8s_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_16u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_Inf_32f_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelInfGetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image NormRel_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormRel_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormRel_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16s_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormRel_L1 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8s_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image NormRel_L1.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_32f_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image NormRel_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image NormRel_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_8s_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image NormRel_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_16u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image NormRel_L1 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L1 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L1 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L1_32f_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8s_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16s_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_8s_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_16u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L1_32f_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL1GetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormRel_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormRel_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16u_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormRel_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16s_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormRel_L2 ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aNormRel">Array that contains the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 8-bit signed image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8s_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 16-bit unsigned image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16u_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked one-channel 32-bit floating point image NormRel_L2.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_32f_C1MR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit unsigned image NormRel_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 8-bit signed image NormRel_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_8s_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 16-bit unsigned image NormRel_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_16u_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Masked three-channel 32-bit floating point image NormRel_L2 affecting only single channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="pMask">mask_image_pointer.</param>
        /// <param name="nMaskStep">mask_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nCOI">channel_of_interest_number.</param>
        /// <param name="pNormRel">Pointer to the computed relative error for the L2 norm of two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, NPP_COI_ERROR if an invalid channel of interest is specified, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified, or NPP_DIVISOR_ERROR if the L2 norm of the second image is zero.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRel_L2_32f_C3CMR(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            IntPtr pMask,
            int nMaskStep,
            NppiSize oSizeROI,
            int nCOI,
            IntPtr pNormRel,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16s_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8s_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8s_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16u_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C1MR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_32f_C1MR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16s_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16u_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16s_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16s_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16s_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_8s_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_8s_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_16u_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_16u_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Computes the device scratch buffer size (in bytes) for nppiNormRel_L2_32f_C3CMR.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiNormRelL2GetBufferHostSize_32f_C3CMR(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDp">Pointer to the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8u64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDp">Pointer to the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8s64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDp">Pointer to the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16u64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDp">Pointer to the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16s64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDp">Pointer to the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32u64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDp">Pointer to the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32s64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pDp">Pointer to the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32f64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8u64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8s64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16u64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16s64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32u64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32s64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32f64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8u64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8s64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16u64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16s64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit unsigned image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32u64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32s64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image DotProd.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32f64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image DotProd ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8u64f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image DotProd ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_8s64f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image DotProd ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed Inf-norm of differences.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16u64f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image DotProd ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_16s64f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit unsigned image DotProd ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32u64f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed image DotProd ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32s64f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image DotProd ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aDp">Array that contains the computed dot product of the two images.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProd_32f64f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp64f[] aDp,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8u64f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8u64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8s64f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8s64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16u64f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16u64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16s64f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16s64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32u64f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32u64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32s64f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32s64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32f64f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32f64f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8u64f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8u64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8s64f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8s64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16u64f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16u64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16s64f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16s64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32u64f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32u64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32s64f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32s64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32f64f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32f64f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8u64f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8u64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8s64f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8s64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16u64f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16u64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16s64f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16s64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32u64f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32u64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32s64f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32s64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32f64f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32f64f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8u64f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8u64f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_8s64f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_8s64f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16u64f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16u64f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_16s64f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_16s64f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32u64f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32u64f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32s64f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32s64f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiDotProd_32f64f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiDotProdGetBufferHostSize_32f64f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image CountInRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pCounts">Pointer to the number of pixels that fall into the specified range.</param>
        /// <param name="nLowerBound">Lower bound of the specified range.</param>
        /// <param name="nUpperBound">Upper bound of the specified range.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_RANGE_ERROR if the lower bound is larger than the upper bound.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRange_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pCounts,
            Npp8u nLowerBound,
            Npp8u nUpperBound,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image CountInRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pCounts">Pointer to the number of pixels that fall into the specified range.</param>
        /// <param name="nLowerBound">Lower bound of the specified range.</param>
        /// <param name="nUpperBound">Upper bound of the specified range.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_RANGE_ERROR if the lower bound is larger than the upper bound.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRange_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pCounts,
            Npp32f nLowerBound,
            Npp32f nUpperBound,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image CountInRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aCounts">Array that contains the number of pixels that fall into the specified range for Three-channels.</param>
        /// <param name="aLowerBound">Fixed size array of the lower bound of the specified range, one per channel.</param>
        /// <param name="aUpperBound">Fixed size array of the upper bound of the specified range, one per channel.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_RANGE_ERROR if the lower bound is larger than the upper bound.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRange_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aCounts,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aLowerBound,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aUpperBound,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image CountInRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aCounts">Array that contains the number of pixels that fall into the specified range for Three-channels.</param>
        /// <param name="aLowerBound">Fixed size array of the lower bound of the specified range, one per channel.</param>
        /// <param name="aUpperBound">Fixed size array of the upper bound of the specified range, one per channel.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_RANGE_ERROR if the lower bound is larger than the upper bound.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRange_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aCounts,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aLowerBound,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aUpperBound,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CountInRange ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aCounts">Array that contains the number of pixels that fall into the specified range for Three-channels.</param>
        /// <param name="aLowerBound">Fixed size array of the lower bound of the specified range, one per channel.</param>
        /// <param name="aUpperBound">Fixed size array of the upper bound of the specified range, one per channel.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_RANGE_ERROR if the lower bound is larger than the upper bound.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRange_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aCounts,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aLowerBound,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp8u[] aUpperBound,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image CountInRange ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="aCounts">Array that contains the number of pixels that fall into the specified range for Three-channels.</param>
        /// <param name="aLowerBound">Fixed size array of the lower bound of the specified range, one per channel.</param>
        /// <param name="aUpperBound">Fixed size array of the upper bound of the specified range, one per channel.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_RANGE_ERROR if the lower bound is larger than the upper bound.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRange_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] aCounts,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aLowerBound,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32f[] aUpperBound,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiCountInRange_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRangeGetBufferHostSize_8u_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiCountInRange_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRangeGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiCountInRange_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRangeGetBufferHostSize_8u_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiCountInRange_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRangeGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiCountInRange_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRangeGetBufferHostSize_8u_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Device scratch buffer size (in bytes) for nppiCountInRange_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCountInRangeGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_8u_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 16-bit unsigned image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16u_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 16-bit signed image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16s_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 32-bit floating point image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_32f_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 8-bit unsigned image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_8u_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 16-bit unsigned image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16u_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 16-bit signed image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16s_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 32-bit floating point image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_32f_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 8-bit unsigned image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_8u_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit unsigned image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16u_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit signed image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16s_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 32-bit floating point image MaxEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_32f_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 8-bit unsigned image MaxEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_8u_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit unsigned image MaxEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16u_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit signed image MaxEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_16s_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 32-bit floating point image MaxEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaxEvery_32f_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 8-bit unsigned image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_8u_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 16-bit unsigned image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16u_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 16-bit signed image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16s_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 32-bit floating point image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_32f_C1IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 8-bit unsigned image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_8u_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 16-bit unsigned image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16u_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 16-bit signed image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16s_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Three-channel 32-bit floating point image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_32f_C3IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 8-bit unsigned image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_8u_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit unsigned image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16u_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit signed image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16s_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 32-bit floating point image MinEvery.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_32f_C4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 8-bit unsigned image MinEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_8u_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit unsigned image MinEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16u_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 16-bit signed image MinEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_16s_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// Four-channel 32-bit floating point image MinEvery ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSrcDst">in_place_image_pointer.</param>
        /// <param name="nSrcDstStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMinEvery_32f_AC4IR(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSrcDst,
            int nSrcDstStep,
            NppiSize oSizeROI);

        /// <summary>
        /// One-channel 8-bit unsigned image Integral with 32-bit signed output.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="oROI">roi_specification.</param>
        /// <param name="nVal">The value to add to pDst image pixels</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiIntegral_8u32s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pDst,
            int nDstStep,
            NppiSize oROI,
            Npp32s nVal);

        /// <summary>
        /// One-channel 8-bit unsigned image Integral with 32-bit floating point output.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="oROI">roi_specification.</param>
        /// <param name="nVal">The value to add to pDst image pixels</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiIntegral_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pDst,
            int nDstStep,
            NppiSize oROI,
            Npp32f nVal);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrIntegral. Destination integral image and square integral image are 32-bit signed int.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pSqr">destination_image_pointer.</param>
        /// <param name="nSqrStep">destination_image_line_step.</param>
        /// <param name="oSrcROI">roi_specification.</param>
        /// <param name="nVal">The value to add to pDst image pixels</param>
        /// <param name="nValSqr">The value to add to pSqr image pixels</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrIntegral_8u32s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pDst,
            int nDstStep,
            IntPtr pSqr,
            int nSqrStep,
            NppiSize oSrcROI,
            Npp32s nVal,
            Npp32s nValSqr);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrIntegral. Destination integral image is 32-bit signed int. Destination square integral image is 64-bit double floating point.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pSqr">destination_image_pointer.</param>
        /// <param name="nSqrStep">destination_image_line_step.</param>
        /// <param name="oSrcROI">roi_specification.</param>
        /// <param name="nVal">The value to add to pDst image pixels</param>
        /// <param name="nValSqr">The value to add to pSqr image pixels</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrIntegral_8u32s64f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pDst,
            int nDstStep,
            IntPtr pSqr,
            int nSqrStep,
            NppiSize oSrcROI,
            Npp32s nVal,
            Npp64f nValSqr);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrIntegral. Destination integral image is 32-bit floating point. Destination square integral image is 64-bit double floating point.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pSqr">destination_image_pointer.</param>
        /// <param name="nSqrStep">destination_image_line_step.</param>
        /// <param name="oSrcROI">roi_specification.</param>
        /// <param name="nVal">The value to add to pDst image pixels</param>
        /// <param name="nValSqr">The value to add to pSqr image pixels</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrIntegral_8u32f64f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pDst,
            int nDstStep,
            IntPtr pSqr,
            int nSqrStep,
            NppiSize oSrcROI,
            Npp32f nVal,
            Npp64f nValSqr);

        /// <summary>
        /// One-channel 32-bit floating point image RectStdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSqr">destination_image_pointer.</param>
        /// <param name="nSqrStep">destination_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="oRect">rectangular window</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiRectStdDev_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSqr,
            int nSqrStep,
            IntPtr pDst,
            int nDstStep,
            NppiSize oSizeROI,
            NppiRect oRect);

        /// <summary>
        /// One-channel 32-bit signed image RectStdDev, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSqr">destination_image_pointer.</param>
        /// <param name="nSqrStep">destination_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="oRect">rectangular window</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiRectStdDev_32s_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSqr,
            int nSqrStep,
            IntPtr pDst,
            int nDstStep,
            NppiSize oSizeROI,
            NppiRect oRect,
            int nScaleFactor);

        /// <summary>
        /// One-channel 32-bit signed image RectStdDev.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="pSqr">destination_image_pointer.</param>
        /// <param name="nSqrStep">destination_image_line_step.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="oRect">rectangular window</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiRectStdDev_32s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            IntPtr pSqr,
            int nSqrStep,
            IntPtr pDst,
            int nDstStep,
            NppiSize oSizeROI,
            NppiRect oRect);

        /// <summary>
        /// Compute levels with even distribution.
        /// </summary>
        /// <param name="hpLevels">A host pointer to array which receives the levels being computed. The array needs to be of size nLevels.</param>
        /// <param name="nLevels">The number of levels being computed. nLevels must be at least 2.</param>
        /// <param name="nLowerLevel">Lower boundary value of the lowest level.</param>
        /// <param name="nUpperLevel">Upper boundary value of the greatest level.</param>
        /// <returns>image_data_error_codes, or NPP_HISTO_NUMBER_OF_LEVELS_ERROR if an invalid nLevels is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiEvenLevelsHost_32s(
            IntPtr hpLevels,
            int nLevels,
            Npp32s nLowerLevel,
            Npp32s nUpperLevel);

        /// <summary>
        /// One-channel 8-bit unsigned HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Pointer to array that receives the computed histogram. The array must be of size nLevels-1.</param>
        /// <param name="nLevels">Number of levels.</param>
        /// <param name="nLowerLevel">Lower boundary of lowest level bin.</param>
        /// <param name="nUpperLevel">Upper boundary of highest level bin.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pHist,
            int nLevels,
            Npp32s nLowerLevel,
            Npp32s nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned HistogramEven ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Pointer to array that receives the computed histogram. The array must be of size nLevels-1.</param>
        /// <param name="nLevels">Number of levels.</param>
        /// <param name="nLowerLevel">Lower boundary of lowest level bin.</param>
        /// <param name="nUpperLevel">Upper boundary of highest level bin.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pHist,
            int nLevels,
            Npp32s nLowerLevel,
            Npp32s nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned HistogramEven ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// One-channel 16-bit signed HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Pointer to array that receives the computed histogram. The array must be of size nLevels-1.</param>
        /// <param name="nLevels">Number of levels.</param>
        /// <param name="nLowerLevel">Lower boundary of lowest level bin.</param>
        /// <param name="nUpperLevel">Upper boundary of highest level bin.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pHist,
            int nLevels,
            Npp32s nLowerLevel,
            Npp32s nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Three-channel 16-bit signed HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit signed HistogramEven.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit signed HistogramEven ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving computed histograms per color channel. Array pointed by pHist[i] be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="nLowerLevel">Array containing lower-level of lowest bin per color channel.</param>
        /// <param name="nUpperLevel">Array containing upper-level of highest bin per color channel.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEven_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nLowerLevel,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]Npp32s[] nUpperLevel,
            IntPtr pBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Pointer to array that receives the computed histogram. The array must be of size nLevels-1.</param>
        /// <param name="pLevels">Pointer to array containing the level sizes of the bins. The array must be of size nLevels.</param>
        /// <param name="nLevels">Number of levels in histogram.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_8u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pHist,
            IntPtr pLevels,
            int nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_8u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_8u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned HistogramRange ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_8u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Pointer to array that receives the computed histogram. The array must be of size nLevels-1.</param>
        /// <param name="pLevels">Pointer to array containing the level sizes of the bins. The array must be of size nLevels.</param>
        /// <param name="nLevels">Number of levels in histogram.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16u_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pHist,
            IntPtr pLevels,
            int nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16u_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16u_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned HistogramRange ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16u_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// One-channel 16-bit signed HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Pointer to array that receives the computed histogram. The array must be of size nLevels-1.</param>
        /// <param name="pLevels">Pointer to array containing the level sizes of the bins. The array must be of size nLevels.</param>
        /// <param name="nLevels">Number of levels in histogram.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16s_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pHist,
            IntPtr pLevels,
            int nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Three-channel 16-bit signed HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16s_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit signed HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16s_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 16-bit signed HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_16s_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// One-channel 32-bit floating point HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Pointer to array that receives the computed histogram. The array must be of size nLevels-1.</param>
        /// <param name="pLevels">Pointer to array containing the level sizes of the bins. The array must be of size nLevels.</param>
        /// <param name="nLevels">Number of levels in histogram.</param>
        /// <param name="pBuffer">Pointer to appropriately sized (</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            IntPtr pHist,
            IntPtr pLevels,
            int nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (nppiHistogramRangeGetBufferSize_32f_C3R) scratch buffer.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point HistogramRange.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (nppiHistogramRangeGetBufferSize_32f_C4R) scratch buffer.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point HistogramRange ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pHist">Array of pointers which are receiving the computed histograms per color channel. Array pointed by pHist[i] must be of size nLevels[i]-1.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="pLevels">Array containing pointers to level-arrays per color channel. Array pointed by pLevel[i] must be of size nLevels[i].</param>
        /// <param name="pBuffer">Pointer to appropriately sized (nppiHistogramRangeGetBufferSize_32f_AC4R) scratch buffer.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRange_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pHist,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]IntPtr[] pLevels,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr pBuffer);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_8u_C1R(
            NppiSize oSizeROI,
            int nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_8u_C3R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_8u_C4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_8u_AC4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16u_C1R(
            NppiSize oSizeROI,
            int nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16u_C3R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16u_C4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16u_AC4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16s_C1R(
            NppiSize oSizeROI,
            int nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16s_C3R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16s_C4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramEvenGetBufferSize_16s_AC4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_8u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_8u_C1R(
            NppiSize oSizeROI,
            int nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_8u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_8u_C3R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_8u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_8u_C4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_8u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_8u_AC4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16u_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16u_C1R(
            NppiSize oSizeROI,
            int nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16u_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16u_C3R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16u_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16u_C4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16u_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16u_AC4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16s_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16s_C1R(
            NppiSize oSizeROI,
            int nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16s_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16s_C3R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16s_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16s_C4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_16s_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_16s_AC4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_32f_C1R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Number of levels in the histogram.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_32f_C1R(
            NppiSize oSizeROI,
            int nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_32f_C3R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_32f_C3R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_32f_C4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_32f_C4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 4)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// Scratch-buffer size for nppiHistogramRange_32f_AC4R.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="nLevels">Array containing number of levels per color channel.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes..</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiHistogramRangeGetBufferSize_32f_AC4R(
            NppiSize oSizeROI,
            [MarshalAs(UnmanagedType.LPArray, SizeConst = 3)]int[] nLevels,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrDistanceFull_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Three-channel 8-bit unsigned image SqrDistanceFull_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceFull_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceFull_Norm ignoring alpha channel, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// One-channel 32-bit floating point image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 32-bit floating point image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image SqrDistanceFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit unsigned image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit signed image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit signed image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image SqrDistanceFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 16-bit unsigned image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 16-bit unsigned image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image SqrDistanceFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image SqrDistanceFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceFull_Norm_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrDistanceSame_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Three-channel 8-bit unsigned image SqrDistanceSame_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceSame_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceSame_Norm ignoring alpha channel, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// One-channel 32-bit floating point image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 32-bit floating point image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image SqrDistanceSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit unsigned image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit signed image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit signed image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image SqrDistanceSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 16-bit unsigned image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 16-bit unsigned image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image SqrDistanceSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image SqrDistanceSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceSame_Norm_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrDistanceValid_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Three-channel 8-bit unsigned image SqrDistanceValid_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceValid_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceValid_Norm ignoring alpha channel, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// One-channel 32-bit floating point image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 32-bit floating point image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image SqrDistanceValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit unsigned image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image SqrDistanceValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit signed image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit signed image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image SqrDistanceValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 16-bit unsigned image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 16-bit unsigned image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image SqrDistanceValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image SqrDistanceValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSqrDistanceValid_Norm_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrFull_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrFull_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_Norm ignoring alpha channel, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// One-channel 32-bit floating point image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 32-bit floating point image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit signed image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit signed image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 16-bit unsigned image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 16-bit unsigned image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrFull_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrFull_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_Norm_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrSame_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrSame_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_Norm ignoring alpha channel, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// One-channel 32-bit floating point image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 32-bit floating point image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit signed image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit signed image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 16-bit unsigned image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 16-bit unsigned image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrSame_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrSame_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_Norm_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrValid_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrValid_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_Norm, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_Norm ignoring alpha channel, scaled by
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor);

        /// <summary>
        /// One-channel 32-bit floating point image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 32-bit floating point image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit signed image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 8-bit signed image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 16-bit unsigned image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Three-channel 16-bit unsigned image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrValid_Norm.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrValid_Norm ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_Norm_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 32-bit floating point images CrossCorrValid.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned images CrossCorrValid.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit signed images CrossCorrValid.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 16-bit unsigned images CrossCorrValid.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrFull_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrFull_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrFull_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrFull_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrFull_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrFull_NormLevel_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size (in bytes) for nppiCrossCorrFull_NormLevel_8u_C1RSfs.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u_C1RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u_C3RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u_C4RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u_AC4RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8s32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8s32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8s32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_8s32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_16u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_16u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_16u32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiFullNormLevelGetBufferHostSize_16u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrSame_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrSame_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrSame_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrSame_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrSame_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrSame_NormLevel_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size (in bytes) for nppiCrossCorrSame_NormLevel_8u_C1RSfs.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u_C1RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u_C3RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u_C4RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u_AC4RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8s32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8s32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8s32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_8s32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_16u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_16u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_16u32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiSameNormLevelGetBufferHostSize_16u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u_C1RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u_C3RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u_C4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="nScaleFactor">integer_result_scaling.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u_AC4RSfs(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            int nScaleFactor,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image CrossCorrValid_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image CrossCorrValid_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8s32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8s32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8s32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image CrossCorrValid_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_8s32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_16u32f_C1R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_16u32f_C3R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrValid_NormLevel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_16u32f_C4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image CrossCorrValid_NormLevel ignoring alpha channel.
        /// </summary>
        /// <param name="pSrc">source_image_pointer.</param>
        /// <param name="nSrcStep">source_image_line_step.</param>
        /// <param name="oSrcRoiSize">roi_specification.</param>
        /// <param name="pTpl">Pointer to the template image.</param>
        /// <param name="nTplStep">Number of bytes between successive rows in the template image.</param>
        /// <param name="oTplRoiSize">roi_specification.</param>
        /// <param name="pDst">destination_image_pointer.</param>
        /// <param name="nDstStep">destination_image_line_step.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiCrossCorrValid_NormLevel_16u32f_AC4R(
            IntPtr pSrc,
            int nSrcStep,
            NppiSize oSrcRoiSize,
            IntPtr pTpl,
            int nTplStep,
            NppiSize oTplRoiSize,
            IntPtr pDst,
            int nDstStep,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size (in bytes) for nppiCrossCorrValid_NormLevel_8u_C1RSfs.
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u_C1RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u_C3RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u_C4RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u_AC4RSfs(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8s32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8s32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8s32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_8s32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_16u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_16u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_16u32f_C4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiValidNormLevelGetBufferHostSize_16u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_8u32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_16u32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_8u32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_16u32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_8u32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_16u32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image QualityIndex.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oRoiSize">roi_specification.</param>
        /// <param name="pDst">Pointer to the quality index.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_QUALITY_INDEX_ERROR if pixels of either image are constant numberse.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndex_32f_AC4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oRoiSize,
            IntPtr pDst,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_8u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_16u32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_32f_C1R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_8u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_16u32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_32f_C3R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_8u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_16u32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// Buffer size (in bytes) for
        /// </summary>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="hpBufferSize">Required buffer size. Important: hpBufferSize is a</param>
        /// <returns>NPP_NULL_POINTER_ERROR if hpBufferSize is 0 (NULL), roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiQualityIndexGetBufferHostSize_32f_AC4R(
            NppiSize oSizeROI,
            IntPtr hpBufferSize);

        /// <summary>
        /// One-channel 8-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32fc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 64-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32fc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 64-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_64f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32fc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 64-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_8s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_16sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit unsigned image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point complex image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_32fc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 64-bit floating point image Maximum_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumError_64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32fc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 64-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32fc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 64-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_64f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32fc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 64-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_8s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_16sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit unsigned image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point complex image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_32fc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 64-bit floating point image Average_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageError_64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32fc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32fc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_64f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32fc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_8s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_16sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_32fc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiMaximumRelativeError_64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32u_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32s_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32sc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32fc_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// One-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_64f_C1R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32u_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32s_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32sc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32fc_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Two-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_64f_C2R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32u_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32s_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32sc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32fc_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Three-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_64f_C3R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 8-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_8s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 16-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_16sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit unsigned image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32u_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32s_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit signed complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32sc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 32-bit floating point complex image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error (absolute value).</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_32fc_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

        /// <summary>
        /// Four-channel 64-bit floating point image MaximumRelative_Error.
        /// </summary>
        /// <param name="pSrc1">source_image_pointer.</param>
        /// <param name="nSrc1Step">source_image_line_step.</param>
        /// <param name="pSrc2">source_image_pointer.</param>
        /// <param name="nSrc2Step">source_image_line_step.</param>
        /// <param name="oSizeROI">roi_specification.</param>
        /// <param name="pError">Pointer to the computed error.</param>
        /// <param name="pDeviceBuffer">Pointer to the required device memory allocation, general_scratch_buffer. Use</param>
        /// <returns>image_data_error_codes, roi_error_codes, or NPP_NOT_EVEN_STEP_ERROR if an invalid floating-point image is specified.</returns>
        [DllImport(stDll, SetLastError = true)]
        public static extern NppStatus nppiAverageRelativeError_64f_C4R(
            IntPtr pSrc1,
            int nSrc1Step,
            IntPtr pSrc2,
            int nSrc2Step,
            NppiSize oSizeROI,
            IntPtr pError,
            IntPtr pDeviceBuffer);

    }
}